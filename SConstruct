import os, shutil, re, subprocess

# Disable out of date targets --------------------------------------------------------------------------

try:
    # Remove '' target if present
    if "" in COMMAND_LINE_TARGETS:
        print("[Info] '' target has been removed; ignoring it.")
        COMMAND_LINE_TARGETS[:] = [t for t in COMMAND_LINE_TARGETS if t != ""]
except Exception:
    pass

try:
    # Disable 'build' target
    if "build" in COMMAND_LINE_TARGETS:
        print("[Warning] 'build' target is disabled. Use `scons run`.")
        Exit(1)
except Exception:
    pass

# QEMU Setup -------------------------------------------------------------------------------------------

Help("""
usage: scons command
       scons -c
       scons -h

options:
  -c, --clean   Remove all files generated by previous builds.

description: SCons entry points.

Commands:
  build
    usage: scons [build]
    description: (Disabled) Relied on obsolete testutils.c.

  run
    usage: scons run [debug]

""")

arch = ARGUMENTS.get('arch')
if not arch:
    for candidate in [
        "riscv64-unknown-elf",
        "riscv64-unknown-linux-gnu",
        "riscv64-linux-gnu",
    ]:
        if shutil.which(f"{candidate}-gcc"):
            arch = candidate
            break
if not arch:
    print("[Error] no RISC-V cross compiler found on PATH")
    Exit(1)

builder   = "SConscript.py"
build_dir = ".build"
inc_dir   = os.path.join("kernel", "include")
ld_file   = os.path.join("kernel", "kernel.ld")
map_file  = File(os.path.join(build_dir, "kernel.map"))

PORT = 6999
logfile = ARGUMENTS.get("logfile", "")
logfile = f",logfile={logfile}" if logfile else ""

CC     = "-".join([arch, "gcc"])
cflags = "-std=gnu2x -Wall -Werror -fno-builtin -nostdlib -nostdinc -march=rv64imac_zicsr -mabi=lp64 -mcmodel=medany -O0 -g "
LD     = "-".join([arch, "ld"])
lflags = f"-nostdlib -Map {map_file} -T {ld_file} "
AS     = "-".join([arch, "as"])
aflags = "-march=rv64imac_zicsr -mabi=lp64 -g "
QEMU   = "qemu-system-riscv64"
qflags = f"-M virt -bios none -m 128M -chardev stdio,id=uart0{logfile} -serial chardev:uart0 -display none"
GDB    = "-".join([arch, "gdb"])

# Generate version.h -----------------------------------------------------------------------------------

header_path = os.path.join("kernel", "include", "app", "version.h")
try:
    rev = subprocess.check_output([
        "git", "rev-list", "--tags", "--max-count=1"
    ]).strip()
    tag = subprocess.check_output([
        "git", "describe", "--tags", rev
    ]).decode().strip()
except Exception:
    tag = "alpha0-0.0.0"

m = re.match(r"alpha(\d+)-(\d+)\.(\d+)\.(\d+)", tag)
alpha, major, minor, patch = (m.groups() if m else ("0", "0", "0", "0"))

contents = f"""#ifndef VERSION_H
#define VERSION_H
/* Automatically generated by SCons. */
#define VERSION_ALPHA {alpha}
#define VERSION_MAJOR {major}
#define VERSION_MINOR {minor}
#define VERSION_PATCH {patch}

#endif

"""

with open(header_path, "w") as vf:
    vf.write(contents)

# Execute ----------------------------------------------------------------------------------------------

env = Environment(CC=CC, AS=AS, LINK=LD, QEMU=QEMU, GDB=GDB, CPPPATH=inc_dir, LINKFLAGS=lflags, memmap=map_file, qflags=qflags, port=PORT)
env.Append(ENV={"PATH": os.environ["PATH"]}, CFLAGS=cflags, ASFLAGS=aflags)
script = env.SConscript(builder, variant_dir=build_dir, duplicate=0, exports='env')