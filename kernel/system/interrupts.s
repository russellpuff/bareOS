/* --  Supervisor mode interrupt management functions -- */

    .extern 

.globl handle_trap
handle_trap:
    addi  sp, sp, -16
    sd    t0, 8(sp)
    sd    t1, 0(sp)
    csrr  t0, scause
    bltz  t0, .L_is_interrupt
    ld    t1, 0(sp)
    ld    t0, 8(sp)
    addi  sp, sp, 16
    j     s_handle_exception

.L_is_interrupt:
    andi  t0, t0, 0x1FF
    li    t1, 5
    beq   t0, t1, .L_clk
    li    t1, 1
    beq   t0, t1, .L_sys
    ld    t1, 0(sp)
    ld    t0, 8(sp)
    addi  sp, sp, 16
    j     handle_plic

.L_clk:
    ld    t1, 0(sp)
    ld    t0, 8(sp)
    addi  sp, sp, 16
    j     handle_clk

.L_sys:
    csrci sip, 0x2
    ld    t1, 0(sp)
    ld    t0, 8(sp)
    addi  sp, sp, 16
    j     handle_syscall

.globl init_interrupts
init_interrupts:            # --
	la t0, handle_trap      #  |  Setup the interrupt handler for any interrupts that are delegated
	csrw stvec, t0          #  |  to Supervisor mode.  (Must be called from Supervisor mode)
	ret                     # --

.globl acknowledge_interrupt
acknowledge_interrupt:        # --
	csrrc zero, sip, a0       #  |  Untrigger a Supervisor interrupt.  This is necessary for software
    ret                       #  |  timers since the STIP bit does not automatically clear.
                              # --
	
.globl raise_syscall
raise_syscall:
	la t0, signum
	sd a0, 0(t0)
	csrwi sip, 0x2
	ret

/* --  Machine mode interrupt management functions -- */

.globl set_interrupt          # --
set_interrupt:                #  |  Enables a class of interrupts to trigger the corresponding handler.
	csrrs a0, mie, a0         #  |  Disabled through the general mstatus/sstatus bits.
	ret                       # --

/*
 * The '__m_trap_vector' label is a table of functions that handle various special interrupts
 * and exceptions generated by the hardware. The '__m_trap_vector' label is set through the 'mtvec'
 * register.  (see bootstrap.s)
*/

__noop:	mret

.global delegate_clk
delegate_clk:
    sd t0, -8(sp)
    sd t1, -16(sp)
    sd t2, -24(sp)
    la t0, timer_interval
    ld t0, (t0)
    la t1, clint_timer_addr
    ld t1, (t1)
    ld t2, (t1)
    add t0, t0, t2
    sw t0, (t1)
    li t0, 0x20
    csrs sip, t0
    ld t2, -24(sp)
    ld t1, -16(sp)
    ld t0, -8(sp)
    ret

.globl __m_trap_vector
.align 8
__m_trap_vector:
    csrrw sp, mscratch, sp
    la sp, m_trap_stack_top
    sd t0, -0x8(sp)
    csrr t0, mcause
    srli t0, t0, 4
    bnez t0, 1f
    ld t0, -0x8(sp)
    csrr sp, mscratch
    j m_handle_exception
1:
    ld t0, -0x8(sp)
    jal delegate_clk
    csrrw sp, mscratch, sp
    mret
