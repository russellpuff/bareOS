/* --  Supervisor mode interrupt management functions -- */

.globl handle_trap
handle_trap:
	sd t0, -0x08(sp)
	sd t1, -0x10(sp)
	csrr t0, scause
	andi t0, t0, 0x1FF
	li t1, 0x5
	bne t0, t1, 1f
	ld t0, -0x08(sp)
	ld t1, -0x10(sp)
	j handle_clk
1:
	li t1, 0x1
	bne t0, t1, 1f
	ld t0, -0x08(sp)
	ld t1, -0x10(sp)
	csrci sip, 0x2
	j handle_syscall
1:
	ld t0, -0x08(sp)
	ld t1, -0x10(sp)
	j handle_plic

.globl init_interrupts
init_interrupts:                # --
	la t0, handle_trap      #  |  Setup the interrupt handler for any interrupts that are delegated
	csrw stvec, t0          #  |  to Supervisor mode.  (Must be called from Supervisor mode)
	csrsi sstatus, 0x2      #  |
	ret                     # --

.globl acknowledge_interrupt
acknowledge_interrupt:          # --
	li a0, 0x20             #  |  Untrigger a Supervisor interrupt.  This is necessary for software
	csrrc a0, sie, a0       #  |  timers since the STIP bit does not automatically clear.
	ret                     # --

.globl signum
.align 4
signum:
	.dword 0
	
.globl raise_syscall
raise_syscall:
	la t0, signum
	sd a0, 0(t0)
	csrwi sip, 0x2
	ret

/* --  Machine mode interrupt management functions -- */

.globl set_interrupt          # --
set_interrupt:                #  |  Enables a class of interrupts to trigger the corresponding handler.
	csrrs a0, mie, a0     #  |  Disabled through the general mstatus/sstatus bits.
	ret                   # --

/*
 * The '__m_trap_vector' label is a table of functions that handle various special interrupts
 * and exceptions generated by the hardware. The '__m_trap_vector' label is set through the 'mtvec'
 * register.  (see bootstrap.s)
*/
__noop:	mret

.globl __m_trap_vector
.align 8
__m_trap_vector:            # Interrupt table index | Cause
.org __m_trap_vector + 0*4  #-----------------------+---------------------------------------
 	j handle_exception  #  0                    | SOFTWARE interrupt [User] or Exception
.org __m_trap_vector + 1*4  #-----------------------+---------------------------------------
	j __noop            #  1                    | SOFTWARE interrupt [Supervisor]
.org __m_trap_vector + 2*4  #-----------------------+---------------------------------------
	j __noop            #  2                    | ------ /reserved/
.org __m_trap_vector + 3*4  #-----------------------+---------------------------------------
	j __noop            #  3                    | SOFTWARE interrupt [Machine]
.org __m_trap_vector + 4*4  #-----------------------+---------------------------------------
	j __noop            #  4                    | TIMER interrupt    [User]
.org __m_trap_vector + 5*4  #-----------------------+---------------------------------------
	j __noop            #  5                    | TIMER interrupt    [Supervisor]
.org __m_trap_vector + 6*4  #-----------------------+---------------------------------------
	j __noop            #  6                    | ------ /reserved/
.org __m_trap_vector + 7*4  #-----------------------+---------------------------------------
	j delegate_clk      #  7                    | TIMER interrupt    [Machine]
.org __m_trap_vector + 8*4  #-----------------------+---------------------------------------
	j __noop            #  8                    | EXTERNAL interrupt [User]
.org __m_trap_vector + 9*4  #-----------------------+---------------------------------------
	j __noop            #  9                    | EXTERNAL interrupt [Supervisor]
.org __m_trap_vector + 10*4 #-----------------------+---------------------------------------
	j __noop            # 10                    | ----- /reserved/
.org __m_trap_vector + 11*4 #-----------------------+---------------------------------------
	j __noop            # 11                    | EXTERNAL interrupt [Machine]
                            #-----------------------+---------------------------------------
