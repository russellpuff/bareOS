import os, shutil
Import("env")

img_file      = "bareOS.img"

def error(code, msg):
    print(msg)
    Exit(code)
dirs = ("system", "device", "app", "lib")
kernel_files  = [Glob(os.path.join("kernel", d, "*.[cs]")) for d in dirs]
def do_gdb(target, source, env):
    gdb_file = img_file
    os.system(f'{env["GDB"]} -ex "file {gdb_file}" -ex "target remote :{env["port"]}"')
    env.Exit(0)

bld_gdb = env.Builder(action=do_gdb)
env["BUILDERS"]["GDB"] = bld_gdb

def do_qemu(target, source, env):
    env['qflags'] += f" -S -gdb tcp::{env['port']}"

bld_qemu = env.Builder(action=do_qemu)
env["BUILDERS"]["Qemu"] = bld_qemu

# ----------------------  Build OS Image  ----------------------------
objs   = env.Object(kernel_files)
img    = env.Program(img_file, objs)
img    = env.Command(None, img, Copy(img_file, "$SOURCE"))
env.Alias("gdb", objs)

env.Alias("build", img)
# ----------------------  Virtualization  ----------------------------
if "debug" in COMMAND_LINE_TARGETS:
    env['qflags'] += f" -S -gdb tcp::{env['port']}"
run = env.Command(target="run_cmd", source=img_file, action=f"{env['QEMU']} -kernel {img_file} {env['qflags']}")
env.Depends(run, img)
env.Alias("run", run)


# --------------------  Environment Management  ----------------------



env.Clean(img, env["memmap"])
env.Clean(img, f"#{img_file}")
